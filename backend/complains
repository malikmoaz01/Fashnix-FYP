// Chatbot is giving this message after send something product is broken
// Sorry, there was an error processing your complaint. Please try again later.


   controllers/chatbotController.js
// import Chatbot from "../models/chatbotModel.js";

// // Handle complaint submission
// export const createComplaint = async (req, res) => {
//   try {
//     const { message } = req.body;

//     if (!message) {
//       return res.status(400).json({ error: "Message is required" });
//     }

//     const user = req.user || null;
//     const userType = user ? "authenticated" : "guest";

//     const newComplaint = new Chatbot({
//       message,
//       user,
//       userType,
//     });

//     await newComplaint.save();
//     res.status(201).json({ message: "Complaint submitted successfully" });

//   } catch (error) {
//     res.status(500).json({ error: "Internal Server Error" });
//   }
// };

// // Fetch all complaints (admin use)
// export const getAllComplaints = async (req, res) => {
//   try {
//     const complaints = await Chatbot.find().populate("user", "username email");
//     res.status(200).json(complaints);
//   } catch (error) {
//     res.status(500).json({ error: "Failed to fetch complaints" });
//   }
// };

// // Update complaint status
// export const updateComplaintStatus = async (req, res) => {
//   try {
//     const { id } = req.params;
//     const { status } = req.body;

//     const complaint = await Chatbot.findById(id);
//     if (!complaint) return res.status(404).json({ error: "Complaint not found" });

//     complaint.status = status || complaint.status;
//     await complaint.save();

//     res.status(200).json({ message: "Complaint status updated" });

//   } catch (error) {
//     res.status(500).json({ error: "Failed to update status" });
//   }
// };


// // Delete a complaint
// export const deleteComplaint = async (req, res) => {
//     try {
//         const { id } = req.params;
//         const deletedComplaint = await Complaint.findByIdAndDelete(id);

//         if (!deletedComplaint) {
//             return res.status(404).json({ success: false, message: "Complaint not found" });
//         }

//         res.status(200).json({ success: true, message: "Complaint deleted successfully" });
//     } catch (error) {
//         console.error("Error deleting complaint:", error);
//         res.status(500).json({ success: false, message: "Failed to delete complaint" });
//     }
// };

// // middleware/authMiddleware.js

// import jwt from "jsonwebtoken";
// import User from "../models/signupModel.js";

// // Verify token middleware
// export const verifyToken = async (req, res, next) => {
//   try {
//     const token = req.header("Authorization")?.replace("Bearer ", "");
    
//     if (!token) {
//       return res.status(401).json({ message: "Authentication required" });
//     }
    
//     const decoded = jwt.verify(token, process.env.JWT_SECRET || "your-secret-key");
//     const user = await User.findById(decoded.id);
    
//     if (!user) {
//       return res.status(401).json({ message: "Invalid token" });
//     }
    
//     req.user = user;
//     next();
//   } catch (error) {
//     console.error("Auth error:", error);
//     res.status(401).json({ message: "Authentication failed" });
//   }
// };

// // Check if user is admin
// export const isAdmin = (req, res, next) => {
//   if (req.user && req.user.isAdmin) {
//     next();
//   } else {
//     res.status(403).json({ message: "Admin access required" });
//   }
// };

// // models/chatbotModel.js
// import mongoose from "mongoose";

// const chatbotSchema = new mongoose.Schema({
//   message: {
//     type: String,
//     required: true,
//   },
//   status: {
//     type: String,
//     default: "pending",
//     enum: ["pending", "in-progress", "resolved"],
//   },
//   userType: {
//     type: String,
//     enum: ["guest", "authenticated"],
//     default: "guest",
//   },
//   user: {
//     type: mongoose.Schema.Types.ObjectId,
//     ref: "userschema",
//     default: null,
//   },
// }, { timestamps: true });

// export default mongoose.model("chatbot", chatbotSchema);

// //routes/chatbotRoutes.js
// import express from "express";
// import {
//     createComplaint,
//     getAllComplaints,
//     updateComplaintStatus,
//     deleteComplaint
// } from "../controllers/complaintController.js";

// const router = express.Router();

// // Public route for creating complaints (no auth required)
// router.post("/complaints", createComplaint);

// // Admin-only routes - without middleware for now
// router.get("/complaints", getAllComplaints);
// router.put("/complaints/:id", updateComplaintStatus);
// router.delete("/complaints/:id", deleteComplaint);

// export default router;


// // Components/User/ComplaintChatbot.jsx
// import React, { useState, useRef, useEffect } from "react";
// import axios from "axios";

// const ComplaintChatbot = () => {
//   const [isOpen, setIsOpen] = useState(false);
//   const [messages, setMessages] = useState([
//     { text: "Hello! How can I help with your complaint today?", sender: "bot" }
//   ]);
//   const [newMessage, setNewMessage] = useState("");
//   const [customerInfo, setCustomerInfo] = useState({
//     customerName: "",
//     email: "",
//     orderNumber: ""
//   });
//   const [step, setStep] = useState("welcome"); // welcome -> collecting-info -> chat
//   const messagesEndRef = useRef(null);

//   useEffect(() => {
//     scrollToBottom();
//   }, [messages]);

//   const scrollToBottom = () => {
//     messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
//   };

//   const toggleChat = () => {
//     setIsOpen(!isOpen);
//   };

//   const startChat = () => {
//     // Check if any fields are empty
//     if (!customerInfo.customerName || !customerInfo.email) {
//       setMessages([
//         ...messages,
//         { text: "Please fill in at least your name and email to continue.", sender: "bot" }
//       ]);
//       return;
//     }
    
//     // Add welcome message with customer name
//     setMessages([
//       ...messages,
//       { text: `Thank you ${customerInfo.customerName}! How can I help with your complaint today?`, sender: "bot" }
//     ]);
//     setStep("chat");
//   };

//   const handleSendMessage = async (e) => {
//     e.preventDefault();
//     if (!newMessage.trim()) return;

//     // Add user message to chat
//     const userMessage = { text: newMessage, sender: "user" };
//     setMessages([...messages, userMessage]);
//     setNewMessage("");

//     try {
//       // Send complaint to server with customer info
//       const response = await axios.post("/api/complaints", { 
//         message: newMessage,
//         ...customerInfo
//       });
      
//       // Add bot response to chat
//       setMessages(prevMessages => [
//         ...prevMessages, 
//         { text: response.data.reply, sender: "bot" }
//       ]);
//     } catch (error) {
//       console.error("Error sending complaint:", error);
//       setMessages(prevMessages => [
//         ...prevMessages, 
//         { text: "Sorry, there was an error processing your complaint. Please try again later.", sender: "bot" }
//       ]);
//     }
//   };

//   const handleInputChange = (e) => {
//     const { name, value } = e.target;
//     setCustomerInfo({
//       ...customerInfo,
//       [name]: value
//     });
//   };

//   return (
//     <div className="fixed bottom-4 right-4 z-50">
//       {/* Chat Icon Button */}
//       <button 
//         onClick={toggleChat}
//         className="bg-blue-600 hover:bg-blue-700 text-white rounded-full p-4 shadow-lg flex items-center justify-center relative"
//       >
//         {isOpen ? (
//           <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
//             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
//           </svg>
//         ) : (
//           <div className="relative">
//             <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
//               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
//             </svg>
//             <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
//               ?
//             </span>
//           </div>
//         )}
//       </button>

//       {/* Chat Window */}
//       {isOpen && (
//         <div className="absolute bottom-16 right-0 w-80 md:w-96 bg-white rounded-lg shadow-xl overflow-hidden flex flex-col">
//           {/* Chat Header */}
//           <div className="bg-blue-600 text-white p-4">
//             <h3 className="font-medium">Customer Support</h3>
//           </div>

//           {/* Chat Content */}
//           {step === "welcome" && (
//             <div className="p-4">
//               <p className="mb-4">To help us assist you better, please provide your information:</p>
//               <form className="space-y-3">
//                 <div>
//                   <label className="block text-sm font-medium text-gray-700">Your Name*</label>
//                   <input 
//                     type="text" 
//                     name="customerName"
//                     value={customerInfo.customerName}
//                     onChange={handleInputChange}
//                     className="mt-1 w-full p-2 border rounded focus:ring-blue-500 focus:border-blue-500" 
//                     required
//                   />
//                 </div>
//                 <div>
//                   <label className="block text-sm font-medium text-gray-700">Email Address*</label>
//                   <input 
//                     type="email" 
//                     name="email"
//                     value={customerInfo.email}
//                     onChange={handleInputChange}
//                     className="mt-1 w-full p-2 border rounded focus:ring-blue-500 focus:border-blue-500" 
//                     required
//                   />
//                 </div>
//                 <div>
//                   <label className="block text-sm font-medium text-gray-700">Order Number (if applicable)</label>
//                   <input 
//                     type="text" 
//                     name="orderNumber"
//                     value={customerInfo.orderNumber}
//                     onChange={handleInputChange}
//                     className="mt-1 w-full p-2 border rounded focus:ring-blue-500 focus:border-blue-500" 
//                   />
//                 </div>
//                 <button
//                   type="button"
//                   onClick={startChat}
//                   className="w-full bg-blue-600 hover:bg-blue-700 text-white p-2 rounded"
//                 >
//                   Start Chat
//                 </button>
//               </form>
//             </div>
//           )}

//           {step === "chat" && (
//             <>
//               {/* Chat Messages */}
//               <div className="flex-1 p-4 overflow-y-auto max-h-80">
//                 {messages.map((message, index) => (
//                   <div
//                     key={index}
//                     className={`mb-2 ${
//                       message.sender === "user" ? "text-right" : "text-left"
//                     }`}
//                   >
//                     <div
//                       className={`inline-block rounded-lg px-4 py-2 max-w-[80%] ${
//                         message.sender === "user"
//                           ? "bg-blue-500 text-white"
//                           : "bg-gray-200 text-gray-800"
//                       }`}
//                     >
//                       {message.text}
//                     </div>
//                   </div>
//                 ))}
//                 <div ref={messagesEndRef} />
//               </div>

//               {/* Chat Input */}
//               <form onSubmit={handleSendMessage} className="border-t p-4 flex">
//                 <input
//                   type="text"
//                   value={newMessage}
//                   onChange={(e) => setNewMessage(e.target.value)}
//                   placeholder="Type your complaint here..."
//                   className="flex-1 border rounded-l-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
//                 />
//                 <button
//                   type="submit"
//                   className="bg-blue-600 hover:bg-blue-700 text-white px-4 rounded-r-lg"
//                 >
//                   Send
//                 </button>
//               </form>
//             </>
//           )}
//         </div>
//       )}
//     </div>
//   );
// };

// export default ComplaintChatbot;


// Admin/AdminComplains

import React, { useState, useEffect } from "react";
import axios from "axios";

const AdminComplains = () => {
  const [complaints, setComplaints] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filter, setFilter] = useState('all');
  const [loading, setLoading] = useState(true);
  const [selectedComplaint, setSelectedComplaint] = useState(null);

  useEffect(() => {
    fetchComplaints();
  }, []);

  const fetchComplaints = async () => {
    try {
      setLoading(true);
      const response = await axios.get("/api/complaints");
      setComplaints(response.data);
      setLoading(false);
    } catch (error) {
      console.error("Error fetching complaints:", error);
      setLoading(false);
    }
  };

  const updateStatus = async (id, newStatus) => {
    try {
      await axios.put(`/api/complaints/${id}`, { status: newStatus });
      fetchComplaints(); // Refresh complaints list
    } catch (error) {
      console.error("Error updating complaint status:", error);
    }
  };

  const viewComplaintDetails = (complaint) => {
    setSelectedComplaint(complaint);
  };

  const closeModal = () => {
    setSelectedComplaint(null);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'new':
        return 'bg-red-100 text-red-800';
      case 'in-progress':
        return 'bg-yellow-100 text-yellow-800';
      case 'resolved':
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const filteredComplaints = complaints.filter(complaint => {
    // Filter by status
    if (filter !== 'all' && complaint.status !== filter) {
      return false;
    }
    
    // Filter by search term in message, name, email or order number
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase();
      return (
        (complaint.message && complaint.message.toLowerCase().includes(searchLower)) ||
        (complaint.customerName && complaint.customerName.toLowerCase().includes(searchLower)) ||
        (complaint.email && complaint.email.toLowerCase().includes(searchLower)) ||
        (complaint.orderNumber && complaint.orderNumber.toString().includes(searchLower))
      );
    }
    
    return true;
  });

  return (
    <div className="bg-gradient-to-b from-[#1F2937] to-[#4B5563] min-h-screen">
      <div className="container mx-auto px-4 py-8">
        <h2 className="text-3xl font-bold text-[#F9FAFB] mb-6">Customer Complaints</h2>

        <div className="mb-6 flex flex-col md:flex-row items-start md:items-center justify-between gap-4">
          <input
            type="text"
            placeholder="Search complaints, customers, emails, or orders..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full md:w-1/2 p-3 bg-[#374151] text-white rounded-md"
          />
          
          <div className="flex gap-2">
            <button 
              onClick={() => setFilter('all')} 
              className={`px-4 py-2 rounded-md ${filter === 'all' ? 'bg-blue-600 text-white' : 'bg-[#374151] text-[#9CA3AF]'}`}
            >
              All
            </button>
            <button 
              onClick={() => setFilter('new')} 
              className={`px-4 py-2 rounded-md ${filter === 'new' ? 'bg-blue-600 text-white' : 'bg-[#374151] text-[#9CA3AF]'}`}
            >
              New
            </button>
            <button 
              onClick={() => setFilter('in-progress')} 
              className={`px-4 py-2 rounded-md ${filter === 'in-progress' ? 'bg-blue-600 text-white' : 'bg-[#374151] text-[#9CA3AF]'}`}
            >
              In Progress
            </button>
            <button 
              onClick={() => setFilter('resolved')} 
              className={`px-4 py-2 rounded-md ${filter === 'resolved' ? 'bg-blue-600 text-white' : 'bg-[#374151] text-[#9CA3AF]'}`}
            >
              Resolved
            </button>
          </div>
        </div>

        {loading ? (
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          </div>
        ) : (
          <>
            {filteredComplaints.length > 0 ? (
              <div className="overflow-x-auto">
                <table className="min-w-full bg-[#374151] rounded-lg overflow-hidden">
                  <thead className="bg-[#1F2937] text-[#9CA3AF]">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">ID</th>
                      <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Customer</th>
                      <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Complaint</th>
                      <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Date</th>
                      <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Status</th>
                      <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-[#4B5563]">
                    {filteredComplaints.map((complaint) => (
                      <tr key={complaint._id}>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-[#F9FAFB]">
                          {complaint._id.substring(0, 8)}
                        </td>
                        <td className="px-6 py-4 text-sm text-[#F9FAFB]">
                          {complaint.customerName || 'Anonymous'}
                          {complaint.email && <div className="text-xs text-[#9CA3AF]">{complaint.email}</div>}
                          {complaint.orderNumber && <div className="text-xs text-[#9CA3AF]">Order: #{complaint.orderNumber}</div>}
                        </td>
                        <td className="px-6 py-4 text-sm text-[#F9FAFB]">
                          <div className="truncate max-w-xs">
                            {complaint.message}
                          </div>
                          <button 
                            onClick={() => viewComplaintDetails(complaint)}
                            className="text-xs text-blue-400 hover:text-blue-300 mt-1"
                          >
                            View details
                          </button>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-[#F9FAFB]">
                          {new Date(complaint.timestamp).toLocaleString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(complaint.status)}`}>
                            {complaint.status}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          <div className="flex gap-2">
                            {complaint.status !== 'in-progress' && (
                              <button 
                                onClick={() => updateStatus(complaint._id, 'in-progress')}
                                className="px-3 py-1 bg-yellow-500 text-white rounded-md text-xs"
                              >
                                In Progress
                              </button>
                            )}
                            {complaint.status !== 'resolved' && (
                              <button 
                                onClick={() => updateStatus(complaint._id, 'resolved')}
                                className="px-3 py-1 bg-green-500 text-white rounded-md text-xs"
                              >
                                Resolve
                              </button>
                            )}
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="bg-[#374151] rounded-lg p-8 text-center text-[#9CA3AF]">
                {searchTerm || filter !== 'all' ? 
                  'No complaints match your search criteria.' : 
                  'No complaints received yet.'}
              </div>
            )}
          </>
        )}
      </div>

      {/* Complaint Detail Modal */}
      {selectedComplaint && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-[#1F2937] rounded-lg w-full max-w-2xl max-h-[80vh] overflow-y-auto">
            <div className="p-6 border-b border-[#4B5563]">
              <div className="flex justify-between items-start">
                <h3 className="text-xl font-semibold text-white">Complaint Details</h3>
                <button 
                  onClick={closeModal}
                  className="text-[#9CA3AF] hover:text-white"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <p className="text-[#9CA3AF] text-sm">Customer Name</p>
                  <p className="text-white">{selectedComplaint.customerName || 'Not provided'}</p>
                </div>
                <div>
                  <p className="text-[#9CA3AF] text-sm">Email</p>
                  <p className="text-white">{selectedComplaint.email || 'Not provided'}</p>
                </div>
                <div>
                  <p className="text-[#9CA3AF] text-sm">Order Number</p>
                  <p className="text-white">{selectedComplaint.orderNumber || 'Not provided'}</p>
                </div>
                <div>
                  <p className="text-[#9CA3AF] text-sm">Status</p>
                  <p>
                    <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(selectedComplaint.status)}`}>
                      {selectedComplaint.status}
                    </span>
                  </p>
                </div>
                <div>
                  <p className="text-[#9CA3AF] text-sm">Date</p>
                  <p className="text-white">{new Date(selectedComplaint.timestamp).toLocaleString()}</p>
                </div>
                <div>
                  <p className="text-[#9CA3AF] text-sm">ID</p>
                  <p className="text-white">{selectedComplaint._id}</p>
                </div>
              </div>
              <div className="mb-4">
                <p className="text-[#9CA3AF] text-sm">Complaint Message</p>
                <div className="mt-2 p-4 bg-[#374151] rounded-lg text-white">
                  {selectedComplaint.message}
                </div>
              </div>
              <div className="flex justify-end gap-2">
                {selectedComplaint.status !== 'in-progress' && (
                  <button 
                    onClick={() => {
                      updateStatus(selectedComplaint._id, 'in-progress');
                      closeModal();
                    }}
                    className="px-4 py-2 bg-yellow-500 text-white rounded-md text-sm"
                  >
                    Mark In Progress
                  </button>
                )}
                {selectedComplaint.status !== 'resolved' && (
                  <button 
                    onClick={() => {
                      updateStatus(selectedComplaint._id, 'resolved');
                      closeModal();
                    }}
                    className="px-4 py-2 bg-green-500 text-white rounded-md text-sm"
                  >
                    Mark Resolved
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminComplains;

// Server.js
// import express from "express";
// import cors from "cors";
// import connectDB from "./config/db.js";
// import signupRoutes from "./routes/signupRoutes.js";
// import contactRoutes from "./routes/contactSend.js";
// import loginRoutes from "./routes/loginRoutes.js";
// import productRoutes from "./routes/productRoutes.js";
// import userRoutes from "./routes/userRoutes.js";
// import ordersRoutes from './routes/ordersRoutes.js';
// import chatbotRoutes from "./routes/chatbotRoutes.js";
// import path from "path"; 
// import { fileURLToPath } from "url";

// const app = express();
// const PORT = 5000;

// const __dirname = path.dirname(fileURLToPath(import.meta.url));

// connectDB();

// app.use(cors());
// app.use(express.json({ limit: "10mb" }));

// app.use('/uploads', express.static('uploads'));
// app.use('/api/users', userRoutes);
// app.use("/api", signupRoutes);
// app.use("/api", loginRoutes);
// app.use("/send-email", contactRoutes);
// app.use("/api", productRoutes);
// app.use("/api", userRoutes);
// app.use("/api", ordersRoutes);
// app.use("/api", chatbotRoutes);

// app.listen(PORT, () =>
//   console.log(`🚀 Server running on http://localhost:${PORT}`)
// );