// <!-- // Config/emailService.js

// import { Resend } from "resend";

// const resend = new Resend("re_BexFYimB_A389F58aqcFUbGwvAnAp3m8L");

// export const sendOrderConfirmationEmail = async (order) => {
//   const itemsListHTML = order.items.map(item => 
//     `<tr>
//       <td style="padding: 8px; border: 1px solid #ddd;">${item.name}</td>
//       <td style="text-align: right; padding: 8px; border: 1px solid #ddd;">${item.quantity}</td>
//       <td style="text-align: right; padding: 8px; border: 1px solid #ddd;">$${(item.price * item.quantity).toFixed(2)}</td>
//     </tr>`
//   ).join('');

//   const response = await resend.emails.send({
//     from: "onboarding@resend.dev",
//     to: order.customerEmail,
//     subject: `Order Confirmation #${order.orderId}`,
//     html: `
//       <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
//         <h2>Thank you for your order!</h2>
//         <p>We've received your order and we're working on it now.</p>
        
//         <div style="background-color: #f5f5f5; padding: 15px; margin: 20px 0;">
//           <p><strong>Order Number:</strong> ${order.orderId}</p>
//           <p><strong>Order Date:</strong> ${new Date(order.createdAt).toLocaleDateString()}</p>
//           <p><strong>Order Status:</strong> ${order.status}</p>
//         </div>
        
//         <h3>Order Summary</h3>
//         <table style="width: 100%; border-collapse: collapse;">
//           <tr style="background-color: #f5f5f5;">
//             <th style="text-align: left; padding: 8px; border: 1px solid #ddd;">Item</th>
//             <th style="text-align: right; padding: 8px; border: 1px solid #ddd;">Qty</th>
//             <th style="text-align: right; padding: 8px; border: 1px solid #ddd;">Price</th>
//           </tr>
//           ${itemsListHTML}
//           <tr style="font-weight: bold;">
//             <td colspan="2" style="text-align: right; padding: 8px; border: 1px solid #ddd;">Total:</td>
//             <td style="text-align: right; padding: 8px; border: 1px solid #ddd;">$${order.totalAmount.toFixed(2)}</td>
//           </tr>
//         </table>
        
//         <div style="margin-top: 20px;">
//           <h3>Shipping Address</h3>
//           <p>
//             ${order.shippingAddress.street}<br>
//             ${order.shippingAddress.city}, ${order.shippingAddress.state} ${order.shippingAddress.zipCode}<br>
//             ${order.shippingAddress.country}
//           </p>
//         </div>
        
//         <div style="margin-top: 20px; color: #666;">
//           <p>If you have any questions, please contact our customer support.</p>
//         </div>
//       </div>
//     `
//   });

//   return response;
// };

// export const sendOrderStatusEmail = async (order) => {
//   const response = await resend.emails.send({
//     from: "orders@yourstore.com",
//     to: order.customerEmail,
//     subject: `Order #${order.orderId} Status Update`,
//     html: `
//       <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
//         <h2>Your Order Status Has Been Updated</h2>
//         <p>Your order #${order.orderId} is now: <strong>${order.status}</strong></p>
        
//         <div style="background-color: #f5f5f5; padding: 15px; margin: 20px 0;">
//           <p><strong>Order Number:</strong> ${order.orderId}</p>
//           <p><strong>Updated On:</strong> ${new Date(order.updatedAt).toLocaleString()}</p>
//         </div>
        
//         <div style="margin-top: 20px;">
//           <p>You can track your order anytime by visiting our website.</p>
//         </div>
//       </div>
//     `
//   });

//   return response;
// };

// // controllers/orderController.js

// import Order from "../models/orderSchema.js"
// // Create new order
// export const createOrder = async (req, res) => {
//     try {
//       const orderData = req.body;
      
//       // Check if order already exists (to prevent duplicates)
//       const existingOrder = await Order.findOne({ orderId: orderData.orderId });
      
//       if (existingOrder) {
//         return res.status(200).json(existingOrder);
//       }
      
//       // Create new order
//       const newOrder = new Order(orderData);
//       await newOrder.save();
      
//       res.status(201).json(newOrder);
//     } catch (error) {
//       console.error("Error creating order:", error);
//       res.status(500).json({ 
//         message: "Failed to create order", 
//         error: error.message 
//       });
//     }
//   };
  
//   // Get order by ID
//   export const getOrderById = async (req, res) => {
//     try {
//       const { orderId } = req.params;
//       const order = await Order.findOne({ orderId });
      
//       if (!order) {
//         return res.status(404).json({ message: "Order not found" });
//       }
      
//       res.status(200).json(order);
//     } catch (error) {
//       console.error("Error getting order:", error);
//       res.status(500).json({ 
//         message: "Failed to get order", 
//         error: error.message 
//       });
//     }
//   };
  
//   // Update order status
//   export const updateOrderStatus = async (req, res) => {
//     try {
//       const { orderId } = req.params;
//       const { status } = req.body;
      
//       const order = await Order.findOne({ orderId });
      
//       if (!order) {
//         return res.status(404).json({ message: "Order not found" });
//       }
      
//       order.status = status;
//       await order.save();
      
//       res.status(200).json(order);
//     } catch (error) {
//       console.error("Error updating order status:", error);
//       res.status(500).json({ 
//         message: "Failed to update order status", 
//         error: error.message 
//       });
//     }
//   };
  
//   // Get all orders for a user
//   export const getUserOrders = async (req, res) => {
//     try {
//       const { email } = req.params;
      
//       const orders = await Order.find({ "customer.email": email })
//         .sort({ createdAt: -1 });
      
//       res.status(200).json(orders);
//     } catch (error) {
//       console.error("Error getting user orders:", error);
//       res.status(500).json({ 
//         message: "Failed to get user orders", 
//         error: error.message 
//       });
//     }
//   };

//   // models/orderSchema.js
//   // models/orderSchema.js
// import mongoose from 'mongoose';

// const orderSchema = new mongoose.Schema({
//   orderId: { type: String, required: true, unique: true },
//   createdAt: { type: Date, default: Date.now },
//   status: { type: String, default: 'confirmed' },
//   items: [{
//     productName: String,
//     price: Number,
//     quantity: Number,
//     size: String
//   }],
//   subtotal: Number,
//   deliveryCost: Number,
//   total: Number,
//   customer: {
//     firstName: String,
//     lastName: String,
//     email: String,
//     phone: String,
//     address: {
//       line1: String,
//       line2: String,
//       city: String,
//       state: String,
//       postalCode: String,
//       country: String
//     }
//   },
//   payment: {
//     method: String,
//     cardLast4: String
//   },
//   delivery: {
//     method: String
//   }
// });

// const Order = mongoose.model('Order', orderSchema);

// export default Order;


// // routes/ordersRoutes.js

// import express from "express";
// import { 
//   createOrder, 
//   getOrderById, 
//   updateOrderStatus, 
//   getUserOrders 
// } from "../controllers/orderController.js";

// const router = express.Router();

// // Create new order
// router.post("/order", createOrder);

// // Get order by ID
// router.get("/order/:orderId", getOrderById);

// // Update order status
// router.put("/order/:orderId/status", updateOrderStatus);

// // Get all orders for a user
// router.get("/user/:email/orders", getUserOrders);

// export default router;

// // Cart.js
// import React, { useState, useEffect } from "react";
// import { Link, useNavigate } from 'react-router-dom';
// import { toast, ToastContainer } from 'react-toastify';
// import 'react-toastify/dist/ReactToastify.css';

// const Cart = () => {
//   const [cartItems, setCartItems] = useState([]);
//   const [products, setProducts] = useState({});
//   const [loading, setLoading] = useState(true);
//   const navigate = useNavigate();

//   useEffect(() => {
//     // Load cart items from localStorage
//     const loadCartItems = async () => {
//       try {
//         setLoading(true);
        
//         // Get cart items from localStorage
//         const storedCart = JSON.parse(localStorage.getItem('cart')) || [];
        
//         // Fetch product details for each cart item
//         const productDetails = {};
        
//         for (const item of storedCart) {
//           // Only fetch if we don't already have the details
//           if (!productDetails[item.productId]) {
//             try {
//               const res = await fetch(`http://localhost:5000/api/products/${item.productId}`);
//               if (res.ok) {
//                 const data = await res.json();
//                 productDetails[item.productId] = data;
//               } else {
//                 console.error(`Failed to fetch product ${item.productId}`);
//               }
//             } catch (err) {
//               console.error(`Error fetching product ${item.productId}:`, err);
//             }
//           }
//         }
        
//         setProducts(productDetails);
//         setCartItems(storedCart);
//         setLoading(false);
//       } catch (err) {
//         console.error('Error loading cart:', err);
//         toast.error('Failed to load cart items');
//         setLoading(false);
//       }
//     };

//     loadCartItems();
//   }, []);

//   const updateQuantity = (productId, size, newQuantity) => {
//     // Find the item in cart
//     const updatedCart = cartItems.map(item => {
//       if (item.productId === productId && item.size === size) {
//         return { ...item, quantity: Math.max(newQuantity, 1) };
//       }
//       return item;
//     });
    
//     // Update state and localStorage
//     setCartItems(updatedCart);
//     localStorage.setItem('cart', JSON.stringify(updatedCart));
//     toast.success('Cart updated!');
//   };

//   const removeItem = (productId, size) => {
//     // Filter out the item to remove
//     const updatedCart = cartItems.filter(
//       item => !(item.productId === productId && item.size === size)
//     );
    
//     // Update state and localStorage
//     setCartItems(updatedCart);
//     localStorage.setItem('cart', JSON.stringify(updatedCart));
//     toast.success('Item removed from cart!');
//   };

//   // Calculate subtotal based on actual product prices
//   const calculateSubtotal = () => {
//     return cartItems.reduce((sum, item) => {
//       const product = products[item.productId];
//       if (!product) return sum;
      
//       const price = product.discountPrice || product.price;
//       return sum + (price * item.quantity);
//     }, 0);
//   };

//   const subtotal = calculateSubtotal();

//   if (loading) {
//     return (
//       <div className="flex justify-center items-center h-96">
//         <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-800"></div>
//       </div>
//     );
//   }

//   if (cartItems.length === 0) {
//     return (
//       <div className="p-4 max-w-6xl mx-auto text-center">
//         <h1 className="text-2xl font-bold mb-4">Your Cart</h1>
//         <div className="p-8 border border-gray-200 rounded-md">
//           <p className="text-gray-600 mb-4">Your cart is empty</p>
//           <Link to="/products">
//             <button className="bg-blue-900 text-white px-6 py-2 rounded-md hover:bg-blue-700 transition">
//               Continue Shopping
//             </button>
//           </Link>
//         </div>
//       </div>
//     );
//   }

//   return (
//     <div className="p-4 max-w-6xl mx-auto">
//       <ToastContainer position="top-right" autoClose={3000} hideProgressBar={false} />
//       <h1 className="text-2xl font-bold mb-4">Your Cart</h1>
//       <div className="flex flex-col md:flex-row gap-8">
//         {/* Cart Items Section */}
//         <div className="flex-1 space-y-4">
//           {cartItems.map((item) => {
//             const product = products[item.productId];
//             if (!product) return null; // Skip if product details not available
            
//             return (
//               <div
//                 key={`${item.productId}-${item.size}`}
//                 className="flex flex-col md:flex-row items-center justify-between border border-blue-800 rounded-md p-4"
//               >
//                 <div className="flex items-center gap-4">
//                   <img
//                     src={product.images && product.images[0]}
//                     alt={product.name}
//                     className="w-20 h-20 object-cover"
//                   />
//                   <div>
//                     <h2 className="font-bold">{product.name}</h2>
//                     <p className="text-sm text-gray-600">
//                       Size: {item.size || "N/A"}
//                     </p>
//                     <p className="text-sm text-gray-600">
//                       {product.discountPrice && (
//                         <span className="text-green-600">
//                           {Math.round(((product.price - product.discountPrice) / product.price) * 100)}% OFF
//                         </span>
//                       )}
//                     </p>
//                   </div>
//                 </div>
//                 <div className="flex items-center gap-4 mt-4 md:mt-0">
//                   <div className="text-right">
//                     {product.discountPrice && (
//                       <p className="text-gray-500 line-through text-sm">
//                         Rs {product.price}
//                       </p>
//                     )}
//                     <p className="text-lg font-bold">
//                       Rs {product.discountPrice || product.price}
//                     </p>
//                   </div>
//                   <div className="flex items-center gap-2">
//                     <button
//                       onClick={() => updateQuantity(item.productId, item.size, item.quantity - 1)}
//                       className="p-2 border rounded"
//                     >
//                       -
//                     </button>
//                     <span>{item.quantity}</span>
//                     <button
//                       onClick={() => updateQuantity(item.productId, item.size, item.quantity + 1)}
//                       className="p-2 border rounded"
//                     >
//                       +
//                     </button>
//                   </div>
//                   <button
//                     onClick={() => removeItem(item.productId, item.size)}
//                     className="text-red-500"
//                   >
//                     🗑
//                   </button>
//                 </div>
//               </div>
//             );
//           })}
//         </div>

//         {/* Order Summary Section */}
//         <div className="w-full md:w-1/3 border border-blue-900 rounded-md p-4">
//           <h2 className="text-xl font-bold mb-4">Order Summary</h2>
//           <div className="flex justify-between border-b py-2">
//             <span>Subtotal</span>
//             <span>Rs {subtotal}</span>
//           </div>
//           <div className="flex justify-between border-b py-2">
//             <span>Shipping</span>
//             <span>Free</span>
//           </div>
//           <div className="flex justify-between text-lg font-bold py-2">
//             <span>Total</span>
//             <span>Rs {subtotal}</span>
//           </div>
//           <Link to="/checkout">
//             <button className="bg-blue-900 text-white w-full py-2 rounded-md mt-4 hover:bg-blue-700 transition">
//               Proceed to Checkout
//             </button>
//           </Link>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default Cart;

// // Checkout.js
// import React, { useState, useEffect } from "react";
// import { useNavigate } from "react-router-dom";
// import { toast, ToastContainer } from "react-toastify";
// import "react-toastify/dist/ReactToastify.css";
// import AddressForm from "./Delivery/Address";
// import DeliveryMethod from "./Delivery/DeliveryMethod";
// import PaymentMethod from "./Delivery/PaymentMethod";
// import OrderReview from "./Delivery/OrderReview";
// import OrderConfirmation from "./Delivery/OrderConfirmation";
// import { loadStripe } from "@stripe/stripe-js";
// import { Elements } from "@stripe/react-stripe-js";

// // Initialize Stripe - replace with your publishable key
// const stripePromise = loadStripe("pk_test_your_stripe_publishable_key");

// const Checkout = () => {
//   const navigate = useNavigate();
//   const [currentStep, setCurrentStep] = useState(1);
//   const [cartItems, setCartItems] = useState([]);
//   const [products, setProducts] = useState({});
//   const [loading, setLoading] = useState(true);
//   const [checkoutData, setCheckoutData] = useState({
//     customer: {
//       firstName: "",
//       lastName: "",
//       email: "",
//       phone: "",
//       address: {
//         line1: "",
//         line2: "",
//         city: "",
//         state: "",
//         postalCode: "",
//         country: "Pakistan",
//       },
//     },
//     delivery: {
//       method: "standard",
//       cost: 0,
//     },
//     payment: {
//       method: "cod",
//       cardDetails: null,
//     },
//     orderTotal: 0,
//     subtotal: 0,
//     orderId: "",
//   });

//   // Fetch cart data on component mount
//   useEffect(() => {
//     const loadCartItems = async () => {
//       try {
//         setLoading(true);
//         const storedCart = JSON.parse(localStorage.getItem("cart")) || [];
        
//         if (storedCart.length === 0) {
//           navigate("/cart");
//           toast.error("Your cart is empty");
//           return;
//         }

//         // Fetch product details for each cart item
//         const productDetails = {};
//         let subtotal = 0;
        
//         for (const item of storedCart) {
//           if (!productDetails[item.productId]) {
//             try {
//               const res = await fetch(
//                 `http://localhost:5000/api/products/${item.productId}`
//               );
//               if (res.ok) {
//                 const data = await res.json();
//                 productDetails[item.productId] = data;
                
//                 // Calculate price
//                 const price = data.discountPrice || data.price;
//                 subtotal += price * item.quantity;
//               } else {
//                 console.error(`Failed to fetch product ${item.productId}`);
//               }
//             } catch (err) {
//               console.error(`Error fetching product ${item.productId}:`, err);
//             }
//           } else {
//             // Product already fetched, just add to subtotal
//             const price = productDetails[item.productId].discountPrice || 
//                          productDetails[item.productId].price;
//             subtotal += price * item.quantity;
//           }
//         }
        
//         setProducts(productDetails);
//         setCartItems(storedCart);
//         setCheckoutData(prev => ({
//           ...prev,
//           subtotal,
//           orderTotal: subtotal
//         }));
//         setLoading(false);
//       } catch (err) {
//         console.error("Error loading cart:", err);
//         toast.error("Failed to load cart items");
//         setLoading(false);
//       }
//     };

//     loadCartItems();
//   }, [navigate]);

//   // Handle step change
//   const nextStep = () => {
//     setCurrentStep((prevStep) => prevStep + 1);
//     window.scrollTo(0, 0);
//   };

//   const prevStep = () => {
//     setCurrentStep((prevStep) => prevStep - 1);
//     window.scrollTo(0, 0);
//   };

//   // Handle form updates
//   const updateCheckoutData = (section, data) => {
//     setCheckoutData((prev) => ({
//       ...prev,
//       [section]: { ...prev[section], ...data },
//     }));
//   };

//   // Handle delivery method change with cost update
//   const updateDeliveryMethod = (method, cost) => {
//     setCheckoutData((prev) => ({
//       ...prev,
//       delivery: { method, cost },
//       orderTotal: prev.subtotal + cost,
//     }));
//   };

//   // Handle order placement
//   const placeOrder = async () => {
//     try {
//       setLoading(true);
      
//       // Generate a simple order ID
//       const orderId = `ORD-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
      
//       // Create order object
//       const order = {
//         orderId,
//         customer: checkoutData.customer,
//         items: cartItems.map(item => ({
//           productId: item.productId,
//           productName: products[item.productId]?.name || "Unknown Product",
//           quantity: item.quantity,
//           size: item.size || "N/A",
//           price: products[item.productId]?.discountPrice || products[item.productId]?.price
//         })),
//         delivery: checkoutData.delivery,
//         payment: {
//           method: checkoutData.payment.method,
//           // Don't include full card details in the order
//           cardLast4: checkoutData.payment.cardDetails?.last4 || null
//         },
//         subtotal: checkoutData.subtotal,
//         deliveryCost: checkoutData.delivery.cost,
//         total: checkoutData.orderTotal,
//         status: "confirmed",
//         createdAt: new Date().toISOString()
//       };
      
//       // In a real app, you would send this to your backend API
//       console.log("Order placed:", order);
      
//       // For this example, we'll store in localStorage for demonstration
//       const orders = JSON.parse(localStorage.getItem("orders")) || [];
//       orders.push(order);
//       localStorage.setItem("orders", JSON.stringify(orders));
      
//       // Update checkout data with order ID
//       setCheckoutData(prev => ({
//         ...prev,
//         orderId
//       }));
      
//       // Send confirmation email
//       await sendOrderConfirmationEmail(order);
      
//       // Clear cart
//       localStorage.setItem("cart", JSON.stringify([]));
      
//       // Dispatch custom event to notify header
//       window.dispatchEvent(new Event('storageUpdated'));
      
//       setLoading(false);
//       nextStep(); // Move to confirmation page
      
//     } catch (error) {
//       console.error("Error placing order:", error);
//       toast.error("Failed to place order. Please try again.");
//       setLoading(false);
//     }
//   };
  
//   // Send order confirmation email via Resend
//   const sendOrderConfirmationEmail = async (order) => {
//     try {
//       // In a real app, you would call your backend API to send the email
//       // This is a placeholder for that API call
//       console.log("Sending confirmation email for order:", order.orderId);
      
//       // Simulate API delay
//       await new Promise(resolve => setTimeout(resolve, 1000));
      
//       return true;
//     } catch (error) {
//       console.error("Error sending confirmation email:", error);
//       return false;
//     }
//   };

//   if (loading) {
//     return (
//       <div className="flex justify-center items-center h-96">
//         <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-800"></div>
//       </div>
//     );
//   }

//   // Render current step
//   const renderStep = () => {
//     switch (currentStep) {
//       case 1:
//         return (
//           <AddressForm
//             customerData={checkoutData.customer}
//             updateCustomerData={(data) => updateCheckoutData("customer", data)}
//             onNext={nextStep}
//           />
//         );
//       case 2:
//         return (
//           <DeliveryMethod
//             selectedMethod={checkoutData.delivery.method}
//             updateDeliveryMethod={updateDeliveryMethod}
//             onNext={nextStep}
//             onBack={prevStep}
//           />
//         );
//       case 3:
//         return (
//           <Elements stripe={stripePromise}>
//             <PaymentMethod
//               paymentData={checkoutData.payment}
//               updatePaymentData={(data) => updateCheckoutData("payment", data)}
//               onNext={nextStep}
//               onBack={prevStep}
//             />
//           </Elements>
//         );
//       case 4:
//         return (
//           <OrderReview
//             checkoutData={checkoutData}
//             cartItems={cartItems}
//             products={products}
//             onPlaceOrder={placeOrder}
//             onBack={prevStep}
//           />
//         );
//       case 5:
//         return (
//           <OrderConfirmation
//             orderId={checkoutData.orderId}
//             customerEmail={checkoutData.customer.email}
//           />
//         );
//       default:
//         return <div>Invalid step</div>;
//     }
//   }; 

//   return (
//     <div className="p-4 max-w-6xl mx-auto">
//       <ToastContainer position="top-right" autoClose={3000} hideProgressBar={false} />
//       <h1 className="text-2xl font-bold mb-4">Checkout</h1>

//       {/* Progress Steps */}
//       <div className="flex justify-between mb-8">
//         {["Address", "Delivery", "Payment", "Review", "Confirmation"].map(
//           (step, index) => (
//             <div
//               key={step}
//               className={`flex-1 text-center relative ${
//                 index < currentStep
//                   ? "text-blue-900"
//                   : index === currentStep - 1
//                   ? "text-blue-900 font-semibold"
//                   : "text-gray-400"
//               }`}
//             >
//               <div className="mb-2 relative z-10">
//                 <span
//                   className={`inline-flex items-center justify-center w-8 h-8 rounded-full ${
//                     index < currentStep
//                       ? "bg-blue-900 text-white"
//                       : index === currentStep - 1
//                       ? "bg-blue-900 text-white"
//                       : "bg-gray-200 text-gray-600"
//                   }`}
//                 >
//                   {index + 1}
//                 </span>
//               </div>
//               <div className="text-xs sm:text-sm">{step}</div>
//               {index < 4 && (
//                 <div
//                   className={`hidden sm:block absolute top-4 w-full h-0.5 ${
//                     index < currentStep - 1 ? "bg-blue-900" : "bg-gray-200"
//                   }`}
//                   style={{ left: "50%" }}
//                 ></div>
//               )}
//             </div>
//           )
//         )}
//       </div>

//       {/* Current Step Content */}
//       <div className="bg-white p-4 sm:p-6 rounded-lg shadow-sm border border-gray-100">
//         {renderStep()}
//       </div>
//     </div>
//   );
// };

// export default Checkout;

// // Delivery/Address.js -->